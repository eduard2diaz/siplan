# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'es'
    is_system_maintance: '%env(IS_SYSTEM_MAINTANCE)%'
    storage_directory: '%env(STORAGE_DIRECTORY)%'
    #configuracion de las variables de conexion al ldap

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.
        #ojo: las variables que se declaran en bind se definen en el constructor de la clase con el mimso nombre que en el bind,
        #pero no se declaran en los argumentos del servicio cuando se declaran en este archivo
        bind:
            $mailer_host: '%env(MAILER_HOST)%'
            $mailer_port: '%env(MAILER_PORT)%'
            $mailer_username: '%env(MAILER_USERNAME)%'
            $mailer_password: '%env(MAILER_PASSWORD)%'

            $ldap_dominio: '%env(LDAP_DOMAIN)%'
            $ldap_server: '%env(LDAP_SERVER)%'
            $ldap_version: '%env(LDAP_VERSION)%'
            $ldap_dn: '%env(LDAP_DN)%'
            $ldap_puerto: '%env(LDAP_PUERTO)%'
            $ldap_username: '%env(LDAP_USERNAME)%'
            $ldap_password: '%env(LDAP_PASSWORD)%'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    #activando las extensiones(truncate,wordwrap,..) twig que instale con composer require twig/extensions
    twig.extension.text:
        class: Twig_Extensions_Extension_Text
        tags:
            - { name: twig.extension }

    #App\EventSubscriber\UsuarioSubscriber: ~
    #DEFINIENDO MIS PROPIOS SERVICIOS
    usuario_subscriber:
        class: App\EventSubscriber\UsuarioSubscriber
        public: true
        tags:
            - { name: doctrine.event_subscriber,  connection: default }
        arguments: ['@service_container']

    fichero_subscriber:
        class: App\EventSubscriber\FicheroSubscriber
        public: true
        tags:
            - { name: doctrine.event_subscriber,  connection: default }
        arguments: ['@service_container']

    grupo_subscriber:
        class: App\EventSubscriber\GrupoSubscriber
        public: true
        tags:
            - { name: doctrine.event_subscriber,  connection: default }

    puntualizacionplangeneral_subscriber:
        class: App\EventSubscriber\PuntualizacionPlanGeneralSubscriber
        public: true
        tags:
            - { name: doctrine.event_subscriber,  connection: default }

    respuestaactividad_subscriber:
        class: App\EventSubscriber\RespuestaSubscriber
        public: true
        tags:
            - { name: doctrine.event_subscriber,  connection: default }

    area_service:
        class: App\Services\AreaService
        public: true

    app.loginlistener:
        class: App\EventListener\LoginListener
        arguments: ["@doctrine"]
        tags:
            - { name: kernel.event_listener, event: security.interactive_login, method: onSecurityInteractiveLogin }

    app.logoutlistener:
        class: App\EventListener\LogoutListener
        arguments: ['@doctrine']

    entity.validator.period:
        class: App\Validator\PeriodValidator
        public: true
        autowire: true
        autoconfigure: true
        tags:
            - { name: validator.constraint_validator, alias: entity.validator.period }
        arguments: ['@doctrine']

    entity.validator.periodactividadgeneral:
        class: App\Validator\PeriodActividadGeneralValidator
        public: true
        autowire: true
        autoconfigure: true
        tags:
            - { name: validator.constraint_validator, alias: entity.validator.periodactividadgeneral }
        arguments: ['@doctrine']

    app.email_service:
        class: App\Services\EmailService
        public: true

    app.ldap_service:
        class: App\Services\LdapService
        public: true

    app.notificacion_service:
        class: App\Services\NotificacionService
        public: true

    app.token_authenticator:
        class: App\Security\ApiTokenAuthenticator